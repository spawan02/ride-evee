openapi: 3.0.0
info:
  title: User Management API
  version: "1.0.0"
  description: >
    This API handles user management with JWT-based authentication and OTP-based
    email verification. Endpoints are secured where necessary. 
    Input validation and proper error handling is implemented.
servers:
  - url: https://evee.itsarc.me/
    description: Production server


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use the Authorization header with the Bearer token to authenticate.


  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: The auto-generated unique identifier.
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        _id: "60d0fe4f5311236168a109ca"
        name: "John Doe"
        email: "john.doe@example.com"
        phone: "1234567890"
        role: "user"
        
    CreateUserInput:
      type: object
      required:
        - name
        - email
        - phone
        - password
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          example: "1234567890"
        password:
          type: string
          format: password
          example: "secret123"
        role:
          type: string
          enum: [user, admin]
          example: "user"

    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "secret123"

    OTPRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"

    OTPVerify:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        otp:
          type: string
          example: "123456"

paths:
  /api/auth/signup:
    post:
      tags:
        - Auth
      summary: Create a new user (Signup) and get a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        "201":
          description: User created and JWT token issued.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Bad Request – Invalid input or email already exists.

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Login a user and return a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        "200":
          description: JWT token issued.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Invalid credentials.
          
  /api/auth/otp/send:
    post:
      tags:
        - Auth
      summary: Sends an OTP to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPRequest'
      responses:
        "200":
          description: OTP sent successfully.
        "400":
          description: Bad Request – Invalid input.

  /api/auth/otp/verify:
    post:
      tags:
        - Auth
      summary: Verifies the OTP for sign-in or signup.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPVerify'
      responses:
        "200":
          description: OTP verified successfully.
        "400":
          description: Invalid OTP or OTP expired.

  /api/users:
    get:
      tags:
        - Users
      summary: Get a list of all users (admin only).
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "403":
          description: Forbidden – Insufficient permissions.
    post:
      tags:
        - Users
      summary: Create a new user (admin only).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad Request – Invalid input.
        "403":
          description: Forbidden – Insufficient permissions.

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get a specific user by ID (admin or self).
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
      responses:
        "200":
          description: Returns the user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: Forbidden – Insufficient permissions.
        "404":
          description: User not found.
    put:
      tags:
        - Users
      summary: Update the user with the specified ID (admin or self).
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad Request – Invalid input.
        "403":
          description: Forbidden – Insufficient permissions.
        "404":
          description: User not found.
    delete:
      tags:
        - Users
      summary: Delete the user with the specified ID (admin only).
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
      responses:
        "200":
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "403":
          description: Forbidden Insufficient permissions.
        "404":
          description: User not found.
